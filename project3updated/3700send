#!/usr/bin/python -u
#
# sender code 
#
#

import sys
import socket
import time
import datetime
import select
import json

# todo: handle multiple sends/receives/ timeouts

# adding deque from 'ack'ed messages
from collections import deque

MSG_SIZE = 1500
DATA_SIZE = 1300
TIMEOUT = 30
SEQUENCE = 0

# holds all the messages that we have sent to the receiver
MESSAGES = deque()
MESSAGES_SN = deque()
NUM_MESSAGES = 0
TIMESTAMPS = deque()

# index of the next message to send
INDEX = 0

PACKETS_IN_TRANSIT = 0

END_OF_FILE = False

# the round trip time (will dynamically adjust)
RTT = 0
RTO = .5
INITIAL_RTT = True
RTT_ALPHA = 0.875
IGNORE_NEXT_RTT = False

SSTHRESH = 10
CONGESTION_WINDOW = 1
# threshold size (used to upate congestion window)


# variable to track when to increase cwnd in CA
CA_ACKS = 0
ACKED_BYTES = 0
DUPLICATE_ACKS = 0

# state variable
# 0 in slow start
# 1 in ca
STATE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":") + 1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

READING = True




# increasing the sequence number
# 2^32 - 1 = 4294967295 = space allocated for sequence number
def sequence_wrapper(length):
    global SEQUENCE
    SEQUENCE = (SEQUENCE + length) % 4294967295


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


# send as many packets as we are allowed to based on our congestion window
def send_packets():
    global SENT_MESSAGES
    global CONGESTION_WINDOW
    global END_OF_FILE
    global INDEX
    while INDEX < CONGESTION_WINDOW and len(MESSAGES) > 0 and INDEX < len(MESSAGES):
        # 0 - Length of data read from STDIN == DATA_SIZE
        # 1 - Length of data read from STDIN < DATA_SIZE (end-of-file)
        # 2 - Length of data read from STDIN == 0 (end-of-file)

        send_next_packet()


def send_next_packet():
    global INDEX
    global PACKETS_IN_TRANSIT
    global SEQUENCE
    global MESSAGES
    global MESSAGES_SN
    global ACKED_BYTES
    global SENT_MESSAGES_SN
    global SENT_MESSAGES
    global TIMESTAMPS
    global dest

    msg = MESSAGES[INDEX]
    packedMsg = json.dumps(msg)
    if sock.sendto(packedMsg, dest) < len(packedMsg):
        log("[error] unable to fully send packet")
    else:
        TIMESTAMPS.append(time.time())
        log("[send data] " + str(msg["sequence"]) + " (" + str(len(msg["data"])) + ")")
        INDEX += 1
        PACKETS_IN_TRANSIT += 1


# logic for receiving acks
def rec_ack(decoded):
    global INDEX
    global STATE
    global SEQUENCE
    global SENT_MESSAGES
    global SENT_MESSAGES_SN
    global CA_ACKS
    global ACKED_BYTES
    global DUPLICATE_ACKS
    global CONGESTION_WINDOW
    global END_OF_FILE
    global PACKETS_IN_TRANSIT
    global TIMESTAMPS
    if STATE == 0:
        if decoded['ack'] == MESSAGES_SN[0]:
            if decoded['eof']:
                log("[transmission successful]")
                sys.exit(0)
            else:
                if len(TIMESTAMPS) > 0:
                    updateRTT()
                # increase the congestion window and pop the sent message of the sent_messages
                CONGESTION_WINDOW += 1
                log("[recv ack] " + str(MESSAGES_SN[0]))
                ACKED_BYTES = MESSAGES_SN[0]
                DUPLICATE_ACKS = 0
                MESSAGES.popleft()
                MESSAGES_SN.popleft()
                PACKETS_IN_TRANSIT -= 1
                INDEX -= 1
                if len(MESSAGES) == 0:
                    END_OF_FILE = True
                # check if we are out of start up
                if CONGESTION_WINDOW >= SSTHRESH:
                    log("[threshold reached] entering congestion avoidance")
                    STATE = 1
        elif decoded['ack'] <= ACKED_BYTES:
            log("[recv ack] " + str(ACKED_BYTES) + " (DUPLICATE)")
            DUPLICATE_ACKS += 1
            PACKETS_IN_TRANSIT -= 1
            if DUPLICATE_ACKS == 3:
                fastRetransmit()
        else:
            MESSAGES.popleft()
            MESSAGES_SN.popleft()
            TIMESTAMPS.popleft()
            INDEX -= 1
            rec_ack(decoded)
    # we are now in the congestion avoidance control logic
    else:
        if decoded['ack'] == MESSAGES_SN[0]:
            if decoded['eof']:
                log("[transmission successful]")
                sys.exit(0)
            else:
                if len(TIMESTAMPS) > 0:
                    updateRTT()
                CA_ACKS += 1
                if CA_ACKS == CONGESTION_WINDOW:
                    CONGESTION_WINDOW += 1
                    CA_ACKS = 0
                log("[recv ack] " + str(MESSAGES_SN[0]))
                ACKED_BYTES = MESSAGES_SN[0]
                DUPLICATE_ACKS = 0
                MESSAGES.popleft()
                MESSAGES_SN.popleft()
                PACKETS_IN_TRANSIT -= 1
                INDEX -= 1
                if len(MESSAGES) == 0:
                    END_OF_FILE = True
                # try to send next packet; break if no more data
                # send_packets()
        elif decoded['ack'] <= ACKED_BYTES:
            log("[recv ack] " + str(ACKED_BYTES) + " (DUPLICATE)")
            DUPLICATE_ACKS += 1
            PACKETS_IN_TRANSIT -= 1
            if DUPLICATE_ACKS == 3:
                fastRetransmit()
        else:
            MESSAGES.popleft()
            MESSAGES_SN.popleft()
            TIMESTAMPS.popleft()
            INDEX -= 1
            rec_ack(decoded)



# dynamically adjust RTT as a moving average
def updateRTT():
    global RTT
    global RTO
    global INITIAL_RTT
    global RTT_ALPHA
    global TIMESTAMPS
    if INITIAL_RTT:
        RTT = time.time() - TIMESTAMPS[0]
        TIMESTAMPS.popleft()
        updateRTO()
        INITIAL_RTT = False
    else:
        RTT = (RTT_ALPHA * RTT) + (1 - RTT_ALPHA) * (time.time() - TIMESTAMPS[0])
        TIMESTAMPS.popleft()
        updateRTO()


# sets RTO (timeout) to 2 * RTT
def updateRTO():
    global RTO
    global RTT
    RTO = max(2 * RTT, .2)
    log("[new RTO] " + str(RTO))


# logic for fast retransmission
def fastRetransmit():
    global INDEX
    global CONGESTION_WINDOW
    global CA_ACKS
    global SSTHRESH
    global DUPLICATE_ACKS
    global END_OF_FILE
    CONGESTION_WINDOW = SSTHRESH / 2
    CA_ACKS = 0
    DUPLICATE_ACKS = 0
    log("[retransmission] 3 duplicate ACKs received, initiating fast retransmit protocol")
    INDEX = 0
    TIMESTAMPS.clear()
    END_OF_FILE = False
    send_packets()


def retransmissionTimeout():
    global INDEX
    global CONGESTION_WINDOW
    global STATE
    global SSTHRESH
    global END_OF_FILE
    log("[error] timeout")
    SSTHRESH = CONGESTION_WINDOW / 2
    CONGESTION_WINDOW = 1
    # back to slow start
    STATE = 0
    log("[retransmission] packet timeout detected, initiating slow retransmit protocol")
    INDEX = 0
    TIMESTAMPS.clear()
    END_OF_FILE = False
    send_packets()


# initialize a deque of the entire message broken into segments of length DATA_SIZE
while READING:
    data = sys.stdin.read(DATA_SIZE)
    if len(data) > 0:
        if len(data) < DATA_SIZE:
            MESSAGES.append({"sequence": SEQUENCE, "data": data, "eof": True})
            sequence_wrapper(len(data))
            MESSAGES_SN.append(SEQUENCE)
        else:
            MESSAGES.append({"sequence": SEQUENCE, "data": data, "eof": False})
            sequence_wrapper(len(data))
            MESSAGES_SN.append(SEQUENCE)
    else:
        READING = False
        MESSAGES.append({"sequence": SEQUENCE, "data": "", "eof": True})
        MESSAGES_SN.append(SEQUENCE)

# main functionality of sender program (point of control for rest of program)
while not END_OF_FILE:
    send_packets()

    # calls select with all the sockets; timeout value is the RTO
    ready, ignore, ignore2 = select.select([sock], [], [], RTO)
    if len(ready):
        result = sock.recvfrom(MSG_SIZE)
        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)
                rec_ack(decoded)
            except (ValueError, KeyError, TypeError):
                log("[recv corrupt packet]")
    else:
        retransmissionTimeout()

sys.exit(0)
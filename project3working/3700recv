#!/usr/bin/python -u
#
# Receiver
#
#
import sys
import socket
import datetime
import json


# Used to print to console during run execution
def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

#################################################################################
# Global Variables used by the sender

# the size of the message being sent to the sender
MSG_SIZE = 1500
# how long it takes the sender to timeout (in seconds)
TIMEOUT = 30
# accumulate the message being sent by the sender
MESSAGE = ""
# the length of the bytes acknowledged so far
ACKED_BYTES = len(MESSAGE)
# the number of acknowledgements we send when we reach the end of message
DUP_EOF_ACKS = 5
# Port setup
UDP_IP = "127.0.0.1"
UDP_PORT = 0
# socket setup
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)
# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# end of global variables used by the sender
#################################################################################


# increasing the sequence number
# 2^32 - 1 = 4294967295 = space allocated for sequence number
def sequence_wrapper(id, length):
    global ACKED_BYTES
    ACKED_BYTES = (id + length) % 4294967295

# determine what we should do next (depending on the sequence number)
# Cases:
# in-order, out-of-order, duplicate
def checkSequenceNum(data):
    global ACKED_BYTES  # the length of the bytes acknowledged so far
    # if in-order
    if data['sequence'] == ACKED_BYTES:
        return 0
    # if out-of-order
    elif data['sequence'] > ACKED_BYTES:
        return 1
    # if duplicate
    else:
        return 2


# handler for received data messages
def receiveInOrderData(data, eof):
    global ACKED_BYTES  # the length of the bytes acknowledged so far
    global MESSAGE  # accumulate the message being sent by the sender
    # if the data message is received in order
    log("[recv data] " + str(data['sequence']) + " (" + str(len(data['data'])) + ") ACCEPTED (in-order)")
    MESSAGE += data['data']
    # updates the ACKED_BYTES value
    sequence_wrapper(data['sequence'], len(data['data']))
    # return the ack message for use in acknowledge()
    return json.dumps({"ack": data['sequence'] + len(data['data']), "eof": eof})


# handles logic for when we have received the full message
def receiveEndOfFileInOrder(data, addr):
    global MESSAGE  # accumulate the message being sent by the sender
    global DUP_EOF_ACKS  # the number of acknowledgements we send when we reach the end of message
    sentAcks = 0
    ack = receiveInOrderData(data, True)
    while sentAcks < DUP_EOF_ACKS:
        if acknowledge(ack, addr):
            sentAcks += 1
    sys.stdout.write(MESSAGE)
    log("[completed]")
    sys.exit(0)


# logic for when we receive packets out of order
def receiveOutOfOrderPacket(data, status):
    global ACKED_BYTES  # the length of the bytes acknowledged so far
    if data['data']:
        if status == 1:
            log("[recv data] " + str(data['sequence']) + " (" + str(len(data['data'])) + ") ACCEPTED (out-of-order)")
        elif status == 2:
            log("[recv data] " + str(data['sequence']) + " (" + str(len(data['data'])) + ") IGNORED")
            # return the ack message for use in acknowledge()
    return json.dumps({"ack": ACKED_BYTES, "eof": False})


# send an acknowledgement to the sender
def acknowledge(ack, addr):
    sentAck = True
    log("ABOUT TO SEND " + ack)
    if sock.sendto(ack, addr) < len(ack):
        log("[error] unable to fully send acknowledgement")
        sentAck = False
    return sentAck

# logic for receiving a corrupt package
def acknowledgeCorrupt(addr):
    global ACKED_BYTES
    log("[recv corrupt packet]")
    ack = json.dumps({"ack": ACKED_BYTES})
    acknowledge(ack, addr)

#############################################################################
# main while loop for receiver logic
while True:
    result = sock.recvfrom(MSG_SIZE)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result

        try:
            decoded = json.loads(data)
            status = checkSequenceNum(decoded)

            # if this is the next sequential packet:
            if status == 0:
                if decoded['eof']:
                    receiveEndOfFileInOrder(decoded, addr)
                elif decoded['data']:
                    acknowledge(receiveInOrderData(decoded, False), addr)
            else:
                acknowledge(receiveOutOfOrderPacket(decoded, status), addr)

        except (ValueError, KeyError, TypeError) as e:
            acknowledgeCorrupt(addr)
            # raise e
    else:
        log("[error] timeout")
        sys.exit(-1)
#############################################################################
#!/usr/bin/python -u
#
# SENDER
#
#
import sys
import socket
import time
import datetime
import select
import json
from collections import deque
#################################################################################
# Global Variables used by the sender

# the size of the message being sent to the receiver
MSG_SIZE = 1500
# the size of the data being sent to the receiver
DATA_SIZE = 1300
# how long it takes the sender to timeout (in seconds)
TIMEOUT = 30
# the sequence number (it is 0 initially)
SEQUENCE = 0
# holds all the messages that we have sent to the receiver
MESSAGES = deque()
# hold all expected acknowledgement numbers for the associated messages
MESSAGES_SN = deque()
# the timestamps for each of the messages sent out (i.e. when they were sent)
TIMESTAMPS = deque()
# index of the next message to send
INDEX = 0
# the number of packets (not acknowledged yet) sent out
PACKETS_IN_TRANSIT = 0
# It is True is there are no messages to be sent/ false if there is
END_OF_FILE = False
# the round trip time (will dynamically adjust)
RTT = 0
# retransmission timeouts
RTO = .5
# Determines if this is the first message to send
INITIAL_RTT = True
# constant used for round trip time estimation
RTT_ALPHA = 0.875
# the threshold value (used for congestion control)
SSTHRESH = 10
# the size of the congestion window
CONGESTION_WINDOW = 1
# variable to track when to increase congestion window in congestion avoidance
CA_ACKS = 0
# how much data has been acknowledged (used in case of duplication)
ACKED_BYTES = 0
# the number of duplicated acknowledgements
DUPLICATE_ACKS = 0
# 0 means we are in slow start & 1 means we are in congestion avoidance
STATE = 0
# determines if we are still adding messages to the deque
READING = True
# Port setup
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":") + 1:])
dest = (UDP_IP, UDP_PORT)
# socket setup
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

# end of global variables used by the sender
#################################################################################


# Used for keeping track of the sequence number
# 2^32 - 1 = 4294967295 = space allocated for sequence number
def sequence_wrapper(length):
    global SEQUENCE  # the sequence number (it is 0 initially)
    SEQUENCE = (SEQUENCE + length) % 4294967295


# Used to print to console during run execution
def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


# send as many packets as we are allowed to based on our congestion window
def send_packets():
    global CONGESTION_WINDOW  # the size of the congestion window
    global END_OF_FILE  # It is True is there are no messages to be sent/ false if there is
    global INDEX  # index of the next message to send
    while INDEX < CONGESTION_WINDOW and len(MESSAGES) > 0 and INDEX < len(MESSAGES):
        send_next_packet()


# logic for sending one packet
def send_next_packet():
    global INDEX  # index of the next message to send
    global PACKETS_IN_TRANSIT  # the number of packets (not acknowledged yet) sent out
    global MESSAGES  # holds all the messages that we have sent to the receiver
    global TIMESTAMPS  # the timestamps for each of the messages sent out (i.e. when they were sent)
    global dest  # the destination of the message to be sent

    msg = MESSAGES[INDEX]
    packedMsg = json.dumps(msg)
    if sock.sendto(packedMsg, dest) < len(packedMsg):
        log("[error] unable to fully send packet")
    else:
        TIMESTAMPS.append(time.time())
        log("[send data] " + str(msg["sequence"]) + " (" + str(len(msg["data"])) + ")")
        INDEX += 1
        PACKETS_IN_TRANSIT += 1


# logic for receiving acknowledgements from the reciever
def rec_ack(decoded):
    global INDEX  # index of the next message to send
    global STATE  # 0 means we are in slow start & 1 means we are in congestion avoidance
    global SEQUENCE  # the sequence number (it is 0 initially)
    global CA_ACKS  # variable to track when to increase congestion window in congestion avoidance
    global ACKED_BYTES  # how much data has been acknowledged (used in case of duplication)
    global DUPLICATE_ACKS  # the number of duplicated acknowledgements
    global CONGESTION_WINDOW  # the size of the congestion window
    global END_OF_FILE  # It is True is there are no messages to be sent/ false if there is
    global PACKETS_IN_TRANSIT  # the number of packets (not acknowledged yet) sent out
    global TIMESTAMPS  # the timestamps for each of the messages sent out (i.e. when they were sent)
    if STATE == 0:
        if decoded['ack'] == MESSAGES_SN[0]:
            if decoded['eof']:
                log("[transmission successful]")
                sys.exit(0)
            else:
                if len(TIMESTAMPS) > 0:
                    updateRTT()
                # increase the congestion window and pop the sent message of the sent_messages
                CONGESTION_WINDOW += 1
                log("[recv ack] " + str(MESSAGES_SN[0]))
                ACKED_BYTES = MESSAGES_SN[0]
                DUPLICATE_ACKS = 0
                MESSAGES.popleft()
                MESSAGES_SN.popleft()
                PACKETS_IN_TRANSIT -= 1
                INDEX -= 1
                if len(MESSAGES) == 0:
                    END_OF_FILE = True
                # Checks to see if we are out of start up (i.e. do we need to change state to 1)
                if CONGESTION_WINDOW >= SSTHRESH:
                    log("[threshold reached] entering congestion avoidance")
                    STATE = 1
        elif decoded['ack'] <= ACKED_BYTES:
            log("[recv ack] " + str(ACKED_BYTES) + " (DUPLICATE)")
            DUPLICATE_ACKS += 1
            PACKETS_IN_TRANSIT -= 1
            if DUPLICATE_ACKS == 3:
                fastRetransmit()
        else:
            MESSAGES.popleft()
            MESSAGES_SN.popleft()
            TIMESTAMPS.popleft()
            INDEX -= 1
            rec_ack(decoded)

    # STATE is 1: we are now in the congestion avoidance control logic
    else:
        if decoded['ack'] == MESSAGES_SN[0]:
            if decoded['eof']:
                log("[transmission successful]")
                sys.exit(0)
            else:
                if len(TIMESTAMPS) > 0:
                    updateRTT()
                CA_ACKS += 1
                if CA_ACKS == CONGESTION_WINDOW:
                    CONGESTION_WINDOW += 1
                    CA_ACKS = 0
                log("[recv ack] " + str(MESSAGES_SN[0]))
                ACKED_BYTES = MESSAGES_SN[0]
                DUPLICATE_ACKS = 0
                MESSAGES.popleft()
                MESSAGES_SN.popleft()
                PACKETS_IN_TRANSIT -= 1
                INDEX -= 1
                if len(MESSAGES) == 0:
                    END_OF_FILE = True
                # try to send next packet; break if no more data
                # send_packets()
        elif decoded['ack'] <= ACKED_BYTES:
            log("[recv ack] " + str(ACKED_BYTES) + " (DUPLICATE)")
            DUPLICATE_ACKS += 1
            PACKETS_IN_TRANSIT -= 1
            if DUPLICATE_ACKS == 3:
                fastRetransmit()
        else:
            MESSAGES.popleft()
            MESSAGES_SN.popleft()
            TIMESTAMPS.popleft()
            INDEX -= 1
            rec_ack(decoded)


# dynamically adjusts RTT as a moving average
def updateRTT():
    global RTT  # the round trip time (will dynamically adjust)
    global RTO  # retransmission timeouts
    global INITIAL_RTT  # Determines if this is the first message to send
    global RTT_ALPHA  # constant used for round trip time estimation
    global TIMESTAMPS  # the timestamps for each of the messages sent out (i.e. when they were sent)
    if INITIAL_RTT:
        RTT = time.time() - TIMESTAMPS[0]
        TIMESTAMPS.popleft()
        updateRTO()
        INITIAL_RTT = False
    else:
        RTT = (RTT_ALPHA * RTT) + (1 - RTT_ALPHA) * (time.time() - TIMESTAMPS[0])
        TIMESTAMPS.popleft()
        updateRTO()


# sets RTO for the sender
def updateRTO():
    global RTO  # retransmission timeouts
    global RTT  # the round trip time (will dynamically adjust)
    RTO = max(2 * RTT, .2)
    log("[new RTO] " + str(RTO))


# logic for fast retransmission (triggered when we get 3 duplicate ACKs)
def fastRetransmit():
    global INDEX # index of the next message to send
    global CONGESTION_WINDOW # the size of the congestion window
    global CA_ACKS # variable to track when to increase congestion window in congestion avoidance
    global SSTHRESH # the threshold value (used for congestion control)
    global DUPLICATE_ACKS  # the number of duplicated acknowledgements
    global END_OF_FILE  # It is True is there are no messages to be sent/ false if there is
    CONGESTION_WINDOW = SSTHRESH / 2
    CA_ACKS = 0
    DUPLICATE_ACKS = 0
    log("[retransmission] 3 duplicate ACKs received, initiating fast retransmit protocol")
    INDEX = 0
    TIMESTAMPS.clear()
    END_OF_FILE = False
    send_packets()


# logic for retransmission after a timeout
def retransmissionTimeout():
    global INDEX  # index of the next message to send
    global CONGESTION_WINDOW  # the size of the congestion window
    global STATE  # 0 means we are in slow start & 1 means we are in congestion avoidance
    global SSTHRESH  # the threshold value (used for congestion control)
    global END_OF_FILE  # It is True is there are no messages to be sent/ false if there is
    log("[error] timeout")
    SSTHRESH = CONGESTION_WINDOW / 2
    CONGESTION_WINDOW = 1
    # back to slow start
    STATE = 0
    log("[retransmission] packet timeout detected, initiating slow retransmit protocol")
    INDEX = 0
    TIMESTAMPS.clear()
    END_OF_FILE = False
    send_packets()


# initialize a deque of the entire message broken into segments of length DATA_SIZE
while READING:
    data = sys.stdin.read(DATA_SIZE)
    if len(data) > 0:
        if len(data) < DATA_SIZE:
            MESSAGES.append({"sequence": SEQUENCE, "data": data, "eof": True})
            sequence_wrapper(len(data))
            MESSAGES_SN.append(SEQUENCE)
        else:
            MESSAGES.append({"sequence": SEQUENCE, "data": data, "eof": False})
            sequence_wrapper(len(data))
            MESSAGES_SN.append(SEQUENCE)
    else:
        READING = False
        MESSAGES.append({"sequence": SEQUENCE, "data": "", "eof": True})
        MESSAGES_SN.append(SEQUENCE)

#######################################################################################
# main functionality of sender program (point of control for rest of program)
while not END_OF_FILE:
    # send as many packets as allowed each time
    send_packets()
    # calls select with all the sockets; timeout value is the RTO
    ready, ignore, ignore2 = select.select([sock], [], [], RTO)
    if len(ready):
        result = sock.recvfrom(MSG_SIZE)
        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)
                rec_ack(decoded)
            except (ValueError, KeyError, TypeError):
                log("[recv corrupt packet]")
    else:
        retransmissionTimeout()
#######################################################################################
# close the program
sys.exit(0)